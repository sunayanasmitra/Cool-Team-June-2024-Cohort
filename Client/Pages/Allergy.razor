@page "/allergy"
@using HealthCareApp.Shared.Dto.MedicalRecord
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Allergy</PageTitle>
<MudContainer MaxWidth="MaxWidth.Small">
	<MudPaper Class="p-5 w-75">
        <MudChip T="string" Label="true" style="margin-bottom:20px; margin-top:20px; font-weight:700;">Manage Allergies</MudChip>
		<MudForm Spacing="2" @ref="@form">
			<MudSelect Label="Allergy" @bind-Value="data.AllergyDirectoryId">
				@foreach (var allergy in allergyDirectories)
				{
					<MudSelectItem Value="allergy.Id">@allergy.AllergyName</MudSelectItem>
				}
			</MudSelect>

            <MudDatePicker Label="Start Date" Editable="true" @bind-Date="_startDate" />
            <MudDatePicker Label="End Date" Editable="true" @bind-Date="_endDate" />
            <MudStack Row="true" Justify="Justify.Center" Spacing="2">
                <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="(() =>SubmitForm())">Submit</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" EndIcon="@Icons.Material.Filled.Send" OnClick="(() =>goNext())">Next</MudButton>
            </MudStack>
		</MudForm>

        @if (allergies.Count == 0)
        {
            <p>No data to display here</p>
        }
        else
        {
		    <MudSimpleTable Items="allergies" Hover="true">
			    <thead>
                    <MudTh>Allergy Name</MudTh>
                    <MudTh>Start Date</MudTh>
                    <MudTh>End Date</MudTh>
                    <MudTh>Actions</MudTh>
                </thead>
                <tbody>
                    @foreach (var allergy in allergies)
                    {
                        <MudTr>
                            <MudTd>@allergy.AllergyDirectoryDto.AllergyName</MudTd>
                            <MudTd>@allergy.StartDate.ToShortDateString()</MudTd>
                            <MudTd>@allergy.EndDate.ToShortDateString()</MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="(() => DeleteAllergy(allergy.Id))" />
                            </MudTd>
                        </MudTr>
                    }
                </tbody>
		    </MudSimpleTable>
        }
	</MudPaper>
</MudContainer>


@code {

	@inject ISnackbar Snackbar
    @inject NavigationManager navigation

	private AllergyDto data { get; set; } = new AllergyDto();
	private List<AllergyDto> allergies { get; set; } = new List<AllergyDto>();
	private List<AllergyDirectoryDto> allergyDirectories { get; set; } = new List<AllergyDirectoryDto>();
	MudForm form { get; set; }

    public DateTime? _startDate { get; set; } = DateTime.Now;
    public DateTime? _endDate { get; set; } = DateTime.Now;

	protected override async Task OnInitializedAsync()
	{
		await LoadAllergies();
		await LoadAllergyDirectory();
	}

	private async Task LoadAllergies()
	{
		allergies = await Http.GetFromJsonAsync<List<AllergyDto>>("Get-Allergy") ?? new List<AllergyDto>();
	}

	public async Task LoadAllergyDirectory()
	{
        allergyDirectories = await Http.GetFromJsonAsync<List<AllergyDirectoryDto>>("Get-AllergyDirectories") ?? new List<AllergyDirectoryDto>();
	}

    private async void SubmitForm()
    {

        if (_startDate == null || _endDate == null)
        {
            Snackbar.Add("Select all options", Severity.Error);
            return;
        }

        data.StartDate = (DateTime)_startDate!;
        data.EndDate = (DateTime)_endDate!;
        data.AllergyDirectoryDto.AllergyName = "";

        HttpResponseMessage response;
        if (data.Id == 0)
        {
            response = await Http.PostAsJsonAsync("/Create-Allergy", data);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Allergy added.", Severity.Success);
            }
            else
            {
                Snackbar.Add("No Allergy Selection.", Severity.Error);
            }
        }

        // Refresh the list
        await LoadAllergies();
        // Reset the form
        data = new AllergyDto();
        form?.ResetAsync();

        StateHasChanged();
    }

    public async void goNext()
    {
        navigation.NavigateTo("/diagnosis");
    }

    private async Task DeleteAllergy(int id)
    {
        var deleteResponse = await Http.DeleteAsync($"/Delete-Allergy/{id}");
        if (deleteResponse.IsSuccessStatusCode)
        {
            Snackbar.Add("Allergy deleted.", Severity.Success);
            await LoadAllergies(); // Refresh the list
        }
        else
        {
            Snackbar.Add("Failed to delete allergy.", Severity.Error);
        }
    }
}

