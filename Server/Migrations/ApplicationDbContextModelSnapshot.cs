// <auto-generated />
using System;
using HealthCareApp.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthCareApp.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.ActivityDirectory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityDirectory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityName = "Running"
                        },
                        new
                        {
                            Id = 2,
                            ActivityName = "Walking"
                        },
                        new
                        {
                            Id = 3,
                            ActivityName = "Yoga"
                        },
                        new
                        {
                            Id = 4,
                            ActivityName = "Cycling"
                        },
                        new
                        {
                            Id = 5,
                            ActivityName = "Swimming"
                        },
                        new
                        {
                            Id = 6,
                            ActivityName = "Hiking"
                        },
                        new
                        {
                            Id = 7,
                            ActivityName = "Pilates"
                        },
                        new
                        {
                            Id = 8,
                            ActivityName = "Rowing"
                        },
                        new
                        {
                            Id = 9,
                            ActivityName = "Elliptical"
                        },
                        new
                        {
                            Id = 10,
                            ActivityName = "Stair Stepper"
                        },
                        new
                        {
                            Id = 11,
                            ActivityName = "HIIT (High Intensity Interval Training"
                        },
                        new
                        {
                            Id = 12,
                            ActivityName = "Strength Training"
                        },
                        new
                        {
                            Id = 13,
                            ActivityName = "Core Training"
                        },
                        new
                        {
                            Id = 14,
                            ActivityName = "Dance"
                        },
                        new
                        {
                            Id = 15,
                            ActivityName = "Water Fitness"
                        },
                        new
                        {
                            Id = 16,
                            ActivityName = "CrossFit"
                        },
                        new
                        {
                            Id = 17,
                            ActivityName = "Functional Training"
                        },
                        new
                        {
                            Id = 18,
                            ActivityName = "Skiing/Snowboarding"
                        },
                        new
                        {
                            Id = 19,
                            ActivityName = "Golf"
                        },
                        new
                        {
                            Id = 20,
                            ActivityName = "Tennis"
                        },
                        new
                        {
                            Id = 21,
                            ActivityName = "Basketball"
                        },
                        new
                        {
                            Id = 22,
                            ActivityName = "Soccer"
                        },
                        new
                        {
                            Id = 23,
                            ActivityName = "Table Tennis"
                        },
                        new
                        {
                            Id = 24,
                            ActivityName = "Badminton"
                        },
                        new
                        {
                            Id = 25,
                            ActivityName = "Volleyball"
                        },
                        new
                        {
                            Id = 26,
                            ActivityName = "Baseball/Softball"
                        },
                        new
                        {
                            Id = 27,
                            ActivityName = "Rock Climbing"
                        },
                        new
                        {
                            Id = 28,
                            ActivityName = "Martial Arts"
                        },
                        new
                        {
                            Id = 29,
                            ActivityName = "Tai Chi"
                        },
                        new
                        {
                            Id = 30,
                            ActivityName = "Mixed Cardio"
                        },
                        new
                        {
                            Id = 31,
                            ActivityName = "Other"
                        });
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.AlcoholHabits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DrinksPerMonth")
                        .HasColumnType("int");

                    b.Property<int>("DrinksPerWeek")
                        .HasColumnType("int");

                    b.Property<int>("LifestyleRecordID")
                        .HasColumnType("int");

                    b.Property<string>("PrimaryAlcoholType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LifestyleRecordID");

                    b.ToTable("AlcoholHabits");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllergyDirectoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AllergyDirectoryId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.AllergyDirectory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllergyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AllergyDirectory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllergyName = "Peanuts"
                        },
                        new
                        {
                            Id = 2,
                            AllergyName = "Shellfish"
                        },
                        new
                        {
                            Id = 3,
                            AllergyName = "Tree Nuts"
                        },
                        new
                        {
                            Id = 4,
                            AllergyName = "Milk"
                        },
                        new
                        {
                            Id = 5,
                            AllergyName = "Eggs"
                        },
                        new
                        {
                            Id = 6,
                            AllergyName = "Soy"
                        },
                        new
                        {
                            Id = 7,
                            AllergyName = "Wheat"
                        },
                        new
                        {
                            Id = 8,
                            AllergyName = "Fish"
                        },
                        new
                        {
                            Id = 9,
                            AllergyName = "Sesame"
                        },
                        new
                        {
                            Id = 10,
                            AllergyName = "Mustard"
                        },
                        new
                        {
                            Id = 11,
                            AllergyName = "Sulfites"
                        },
                        new
                        {
                            Id = 12,
                            AllergyName = "Latex"
                        },
                        new
                        {
                            Id = 13,
                            AllergyName = "Pollen"
                        },
                        new
                        {
                            Id = 14,
                            AllergyName = "Dust Mites"
                        },
                        new
                        {
                            Id = 15,
                            AllergyName = "Mold"
                        },
                        new
                        {
                            Id = 16,
                            AllergyName = "Pet Dander"
                        },
                        new
                        {
                            Id = 17,
                            AllergyName = "Insect Stings"
                        },
                        new
                        {
                            Id = 18,
                            AllergyName = "Medications"
                        },
                        new
                        {
                            Id = 19,
                            AllergyName = "Fragrances"
                        },
                        new
                        {
                            Id = 20,
                            AllergyName = "Nickel"
                        });
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.BasicInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("BasicInformation");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiagnosisDirectoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisDirectoryId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.DiagnosisDirectory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DiagnosisName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DiagnosisDirectory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiagnosisName = "Diabetes Mellitus"
                        },
                        new
                        {
                            Id = 2,
                            DiagnosisName = "Hypertension"
                        },
                        new
                        {
                            Id = 3,
                            DiagnosisName = "Asthma"
                        },
                        new
                        {
                            Id = 4,
                            DiagnosisName = "Chronic Obstructive Pulmonary Disease (COPD)"
                        },
                        new
                        {
                            Id = 5,
                            DiagnosisName = "Coronary Artery Disease"
                        },
                        new
                        {
                            Id = 6,
                            DiagnosisName = "Stroke"
                        },
                        new
                        {
                            Id = 7,
                            DiagnosisName = "Parkinson's Disease"
                        },
                        new
                        {
                            Id = 8,
                            DiagnosisName = "Rheumatoid Arthritis"
                        },
                        new
                        {
                            Id = 9,
                            DiagnosisName = "Multiple Sclerosis"
                        },
                        new
                        {
                            Id = 10,
                            DiagnosisName = "Alzheimer's Disease"
                        },
                        new
                        {
                            Id = 11,
                            DiagnosisName = "Epilepsy"
                        },
                        new
                        {
                            Id = 12,
                            DiagnosisName = "Cancer"
                        },
                        new
                        {
                            Id = 13,
                            DiagnosisName = "Chronic Kidney Disease"
                        },
                        new
                        {
                            Id = 14,
                            DiagnosisName = "Gastroesophageal Reflux Disease (GERD)"
                        },
                        new
                        {
                            Id = 15,
                            DiagnosisName = "Peptic Ulcer Disease"
                        },
                        new
                        {
                            Id = 16,
                            DiagnosisName = "Psoriasis"
                        },
                        new
                        {
                            Id = 17,
                            DiagnosisName = "Hypothyroidism"
                        },
                        new
                        {
                            Id = 18,
                            DiagnosisName = "Hyperthyroidism"
                        },
                        new
                        {
                            Id = 19,
                            DiagnosisName = "Obesity"
                        },
                        new
                        {
                            Id = 20,
                            DiagnosisName = "Sleep Apnea"
                        },
                        new
                        {
                            Id = 21,
                            DiagnosisName = "Chronic Sinusitis"
                        },
                        new
                        {
                            Id = 22,
                            DiagnosisName = "Bronchitis"
                        },
                        new
                        {
                            Id = 23,
                            DiagnosisName = "Anemia"
                        },
                        new
                        {
                            Id = 24,
                            DiagnosisName = "Tuberculosis"
                        },
                        new
                        {
                            Id = 25,
                            DiagnosisName = "Hepatitis B"
                        },
                        new
                        {
                            Id = 26,
                            DiagnosisName = "Hepatitis C"
                        },
                        new
                        {
                            Id = 27,
                            DiagnosisName = "Scleroderma"
                        },
                        new
                        {
                            Id = 28,
                            DiagnosisName = "Lupus"
                        },
                        new
                        {
                            Id = 29,
                            DiagnosisName = "Chronic Fatigue Syndrome"
                        },
                        new
                        {
                            Id = 30,
                            DiagnosisName = "Cystic Fibrosis"
                        });
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.DietPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DietGoal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthPlanID")
                        .HasColumnType("int");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HealthPlanID");

                    b.ToTable("DietPlan");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.DrugDirectory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DrugDirectory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DrugName = "Aspirin"
                        },
                        new
                        {
                            Id = 2,
                            DrugName = "Ibuprofen"
                        },
                        new
                        {
                            Id = 3,
                            DrugName = "Acetaminophen"
                        },
                        new
                        {
                            Id = 4,
                            DrugName = "Amoxicillin"
                        },
                        new
                        {
                            Id = 5,
                            DrugName = "Metformin"
                        },
                        new
                        {
                            Id = 6,
                            DrugName = "Lisinopril"
                        },
                        new
                        {
                            Id = 7,
                            DrugName = "Atorvastatin"
                        },
                        new
                        {
                            Id = 8,
                            DrugName = "Simvastatin"
                        },
                        new
                        {
                            Id = 9,
                            DrugName = "Hydrochlorothiazide"
                        },
                        new
                        {
                            Id = 10,
                            DrugName = "Losartan"
                        },
                        new
                        {
                            Id = 11,
                            DrugName = "Omeprazole"
                        },
                        new
                        {
                            Id = 12,
                            DrugName = "Esomeprazole"
                        },
                        new
                        {
                            Id = 13,
                            DrugName = "Gabapentin"
                        },
                        new
                        {
                            Id = 14,
                            DrugName = "Hydrocodone"
                        },
                        new
                        {
                            Id = 15,
                            DrugName = "Oxycodone"
                        },
                        new
                        {
                            Id = 16,
                            DrugName = "Sertraline"
                        },
                        new
                        {
                            Id = 17,
                            DrugName = "Fluoxetine"
                        },
                        new
                        {
                            Id = 18,
                            DrugName = "Alprazolam"
                        },
                        new
                        {
                            Id = 19,
                            DrugName = "Clonazepam"
                        },
                        new
                        {
                            Id = 20,
                            DrugName = "Levothyroxine"
                        },
                        new
                        {
                            Id = 21,
                            DrugName = "Metoprolol"
                        },
                        new
                        {
                            Id = 22,
                            DrugName = "Amlodipine"
                        },
                        new
                        {
                            Id = 23,
                            DrugName = "Furosemide"
                        },
                        new
                        {
                            Id = 24,
                            DrugName = "Azithromycin"
                        },
                        new
                        {
                            Id = 25,
                            DrugName = "Ciprofloxacin"
                        },
                        new
                        {
                            Id = 26,
                            DrugName = "Doxycycline"
                        },
                        new
                        {
                            Id = 27,
                            DrugName = "Prednisone"
                        },
                        new
                        {
                            Id = 28,
                            DrugName = "Methylprednisolone"
                        },
                        new
                        {
                            Id = 29,
                            DrugName = "Insulin"
                        },
                        new
                        {
                            Id = 30,
                            DrugName = "Ceftriaxone"
                        });
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.DrugHabits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DosesPerMonth")
                        .HasColumnType("int");

                    b.Property<int>("DosesPerWeek")
                        .HasColumnType("int");

                    b.Property<int>("DrugDirectoryId")
                        .HasColumnType("int");

                    b.Property<int>("LifestyleRecordID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugDirectoryId");

                    b.HasIndex("LifestyleRecordID");

                    b.ToTable("DrugHabits");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.EatingHabits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaloriesPerDay")
                        .HasColumnType("int");

                    b.Property<int>("CarbIntakePerDay")
                        .HasColumnType("int");

                    b.Property<decimal>("CerealsPercentofIntake")
                        .HasColumnType("decimal(2,2)");

                    b.Property<int>("CholesterolIntakePerDay")
                        .HasColumnType("int");

                    b.Property<int>("FatIntakePerDay")
                        .HasColumnType("int");

                    b.Property<string>("FoodRestriction")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("LifestyleRecordID")
                        .HasColumnType("int");

                    b.Property<decimal>("MeatPercentOfIntake")
                        .HasColumnType("decimal(2,2)");

                    b.Property<int>("ProteinIntakePerDay")
                        .HasColumnType("int");

                    b.Property<int>("SodiumIntakePerDay")
                        .HasColumnType("int");

                    b.Property<int>("SugarIntakePerDay")
                        .HasColumnType("int");

                    b.Property<decimal>("VegetablePercentOfIntake")
                        .HasColumnType("decimal(2,2)");

                    b.HasKey("Id");

                    b.HasIndex("LifestyleRecordID");

                    b.ToTable("EatingHabits");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.HealthPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfPlan")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("HealthPlan");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.HealthRisk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HealthPlanID")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Risk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthPlanID");

                    b.ToTable("HealthRisk");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.LifestyleRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("LifestyleRecord");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.MedicalDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("MedicalDocument");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BloodGlucoseLevel")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("BloodPressure")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal>("HeightInInches")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("WeightInPounds")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("MedicalRecord");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DrugDirectoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DrugDirectoryId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("Medication");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.PhysicalActivities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityDirectoryId")
                        .HasColumnType("int");

                    b.Property<int>("LifestyleRecordID")
                        .HasColumnType("int");

                    b.Property<int>("TimesPerWeek")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityDirectoryId");

                    b.HasIndex("LifestyleRecordID");

                    b.ToTable("PhysicalActivities");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.Reminders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HealthPlanID")
                        .HasColumnType("int");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<string>("Reminder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthPlanID");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SymptomDirectoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("SymptomDirectoryId");

                    b.ToTable("Symptom");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.SymptomDirectory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SymptomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SymptomDirectory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SymptomName = "Fever"
                        },
                        new
                        {
                            Id = 2,
                            SymptomName = "Cough"
                        },
                        new
                        {
                            Id = 3,
                            SymptomName = "Shortness of Breath"
                        },
                        new
                        {
                            Id = 4,
                            SymptomName = "Fatigue"
                        },
                        new
                        {
                            Id = 5,
                            SymptomName = "Headache"
                        },
                        new
                        {
                            Id = 6,
                            SymptomName = "Sore Throat"
                        },
                        new
                        {
                            Id = 7,
                            SymptomName = "Runny Nose"
                        },
                        new
                        {
                            Id = 8,
                            SymptomName = "Muscle Aches"
                        },
                        new
                        {
                            Id = 9,
                            SymptomName = "Chills"
                        },
                        new
                        {
                            Id = 10,
                            SymptomName = "Nausea"
                        },
                        new
                        {
                            Id = 11,
                            SymptomName = "Vomiting"
                        },
                        new
                        {
                            Id = 12,
                            SymptomName = "Diarrhea"
                        },
                        new
                        {
                            Id = 13,
                            SymptomName = "Chest Pain"
                        },
                        new
                        {
                            Id = 14,
                            SymptomName = "Abdominal Pain"
                        },
                        new
                        {
                            Id = 15,
                            SymptomName = "Rash"
                        },
                        new
                        {
                            Id = 16,
                            SymptomName = "Dizziness"
                        },
                        new
                        {
                            Id = 17,
                            SymptomName = "Swelling"
                        },
                        new
                        {
                            Id = 18,
                            SymptomName = "Joint Pain"
                        },
                        new
                        {
                            Id = 19,
                            SymptomName = "Confusion"
                        },
                        new
                        {
                            Id = 20,
                            SymptomName = "Loss of Appetite"
                        },
                        new
                        {
                            Id = 21,
                            SymptomName = "Coughing Up Blood"
                        },
                        new
                        {
                            Id = 22,
                            SymptomName = "Wheezing"
                        },
                        new
                        {
                            Id = 23,
                            SymptomName = "Difficulty Swallowing"
                        },
                        new
                        {
                            Id = 24,
                            SymptomName = "Loss of Taste"
                        },
                        new
                        {
                            Id = 25,
                            SymptomName = "Loss of Smell"
                        },
                        new
                        {
                            Id = 26,
                            SymptomName = "Frequent Urination"
                        },
                        new
                        {
                            Id = 27,
                            SymptomName = "Bloody Urine"
                        },
                        new
                        {
                            Id = 28,
                            SymptomName = "Yellowing of Skin"
                        },
                        new
                        {
                            Id = 29,
                            SymptomName = "Difficulty Breathing"
                        },
                        new
                        {
                            Id = 30,
                            SymptomName = "Chest Tightness"
                        });
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.VaccineDirectory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VaccineDirectory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            VaccineName = "Covid Pfizer"
                        },
                        new
                        {
                            Id = 2,
                            VaccineName = "Moderna Covid"
                        },
                        new
                        {
                            Id = 3,
                            VaccineName = "Johnson and Johnson Covid"
                        });
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.VaccineRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateAdministered")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VaccineDirectoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("VaccineRelation");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.WorkoutPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HealthPlanID")
                        .HasColumnType("int");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<string>("WorkoutGoal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthPlanID");

                    b.ToTable("WorkoutPlan");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.AlcoholHabits", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.LifestyleRecord", "LifestyleRecord")
                        .WithMany("AlcoholHabits")
                        .HasForeignKey("LifestyleRecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LifestyleRecord");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.Allergy", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.AllergyDirectory", "AllergyDirectory")
                        .WithMany()
                        .HasForeignKey("AllergyDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCareApp.Server.Models.MedicalRecord", null)
                        .WithMany("Allergy")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllergyDirectory");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.BasicInformation", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.ApplicationUser", null)
                        .WithOne("BasicInformation")
                        .HasForeignKey("HealthCareApp.Server.Models.BasicInformation", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.Diagnosis", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.DiagnosisDirectory", null)
                        .WithMany("Diagnosis")
                        .HasForeignKey("DiagnosisDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCareApp.Server.Models.MedicalRecord", "MedicalRecord")
                        .WithMany("Diagnosis")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.DietPlan", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.HealthPlan", null)
                        .WithMany("DietPlan")
                        .HasForeignKey("HealthPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.DrugHabits", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.DrugDirectory", "DrugDirectory")
                        .WithMany()
                        .HasForeignKey("DrugDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCareApp.Server.Models.LifestyleRecord", "LifestyleRecord")
                        .WithMany("DrugHabits")
                        .HasForeignKey("LifestyleRecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrugDirectory");

                    b.Navigation("LifestyleRecord");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.EatingHabits", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.LifestyleRecord", "LifestyleRecord")
                        .WithMany("EatingHabits")
                        .HasForeignKey("LifestyleRecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LifestyleRecord");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.HealthPlan", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.ApplicationUser", null)
                        .WithOne("HealthPlan")
                        .HasForeignKey("HealthCareApp.Server.Models.HealthPlan", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.HealthRisk", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.HealthPlan", null)
                        .WithMany("HealthRisk")
                        .HasForeignKey("HealthPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.LifestyleRecord", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.ApplicationUser", null)
                        .WithMany("LifestyleRecords")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.MedicalDocument", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.ApplicationUser", null)
                        .WithMany("MedicalDocuments")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.MedicalRecord", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("MedicalRecords")
                        .HasForeignKey("HealthCareApp.Server.Models.MedicalRecord", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.Medication", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.DrugDirectory", "DrugDirectory")
                        .WithMany()
                        .HasForeignKey("DrugDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCareApp.Server.Models.MedicalRecord", null)
                        .WithMany("Medication")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrugDirectory");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.PhysicalActivities", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.ActivityDirectory", "ActivityDirectory")
                        .WithMany()
                        .HasForeignKey("ActivityDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCareApp.Server.Models.LifestyleRecord", "LifestyleRecord")
                        .WithMany("PhysicalActivities")
                        .HasForeignKey("LifestyleRecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityDirectory");

                    b.Navigation("LifestyleRecord");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.Reminders", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.HealthPlan", null)
                        .WithMany("Reminders")
                        .HasForeignKey("HealthPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.Symptom", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.MedicalRecord", null)
                        .WithMany("Symptom")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCareApp.Server.Models.SymptomDirectory", "symptomDirectory")
                        .WithMany()
                        .HasForeignKey("SymptomDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("symptomDirectory");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.VaccineRelation", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("VaccineRelations")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.WorkoutPlan", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.HealthPlan", null)
                        .WithMany("WorkoutPlan")
                        .HasForeignKey("HealthPlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthCareApp.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HealthCareApp.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.ApplicationUser", b =>
                {
                    b.Navigation("BasicInformation")
                        .IsRequired();

                    b.Navigation("HealthPlan")
                        .IsRequired();

                    b.Navigation("LifestyleRecords");

                    b.Navigation("MedicalDocuments");

                    b.Navigation("MedicalRecords")
                        .IsRequired();

                    b.Navigation("VaccineRelations");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.DiagnosisDirectory", b =>
                {
                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.HealthPlan", b =>
                {
                    b.Navigation("DietPlan");

                    b.Navigation("HealthRisk");

                    b.Navigation("Reminders");

                    b.Navigation("WorkoutPlan");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.LifestyleRecord", b =>
                {
                    b.Navigation("AlcoholHabits");

                    b.Navigation("DrugHabits");

                    b.Navigation("EatingHabits");

                    b.Navigation("PhysicalActivities");
                });

            modelBuilder.Entity("HealthCareApp.Server.Models.MedicalRecord", b =>
                {
                    b.Navigation("Allergy");

                    b.Navigation("Diagnosis");

                    b.Navigation("Medication");

                    b.Navigation("Symptom");
                });
#pragma warning restore 612, 618
        }
    }
}
